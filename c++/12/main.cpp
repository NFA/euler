/**
 * projecteuler.net
 * Problem 12
 *
 * The sequence of triangle numbers is generated by adding the natural numbers.
 * So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first
 * ten terms would be:
 *
 * 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
 *
 * Let us list the factors of the first seven triangle numbers:
 *
 *  1: 1
 *  3: 1,3
 *  6: 1,2,3,6
 * 10: 1,2,5,10
 * 15: 1,3,5,15
 * 21: 1,3,7,21
 * 28: 1,2,4,7,14,28
 * We can see that 28 is the first triangle number to have over five divisors.
 *
 * What is the value of the first triangle number to have over five hundred
 * divisors?
 */
#include <iostream>
#include <vector>
#include <cmath>

template <typename T = int>
class triangle_number_generator {
public:
  triangle_number_generator() : current(1), nth(1) { }

  T operator*() { return current; }
  triangle_number_generator &operator++() {
    nth += 1;
    current = current + nth;
    return *this;
  }
  T ordinal() { return nth; }
private:
  T current;
  T nth;
};

template <typename T = int>
T nth_triangle_number(T num) {
  return ((num * num) + num)/2;
}

template <typename T = int>
std::vector<T> get_divisors(T number) {
  std::vector<T> ret;
  int limit = static_cast<int>(std::sqrt(number));
  for (int i = 1; i < limit; i++) {
    if (number % i == 0)
      ret.push_back(i);
  }
  //ret contains factor pairs of divisors
  // multiply n with n+1 up to n-1
  // not done yet
  return ret;
}

template <typename T = int>
int count_divisors(T number) {
  int ret = 0;
  int limit = static_cast<int>(std::sqrt(number));

  for (int i = 1; i <= limit; i++) {
    if (number % i == 0)
      ++ret;
  }
  return ret * 2;
}


int main(int argc, char *argv[]) {
  triangle_number_generator<long> triangles;

  while (count_divisors<long>(*triangles) < 500) {
    ++triangles;
  }

  std::cout << "Value: " << *triangles << std::endl;
  return 0;
}

